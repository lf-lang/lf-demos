/**
 * Basic Hello World program for Mujoco.
 *
 * See [README.md](../README.md) for prerequisites and installation instructions.
 *
 * @author Edward A. Lee
 */
target C {
  cmake-include: "include/mujoco.cmake"
}

// Based on basic.cc from MuJoCo

// Copyright 2021 DeepMind Technologies Limited
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

preamble {=
  #include <stdio.h>
  #include <string.h>

  #include <GLFW/glfw3.h>
  #include <mujoco/mujoco.h>

  typedef struct {
    mjModel* m;           // MuJoCo model
    mjData* d;            // MuJoCo data
    mjvCamera cam;        // Camera
    mjvOption opt;        // Visualization options
    mjvScene scn;         // Scene
    mjrContext con;       // GPU context

    // State variables keeping track of mouse state:
    bool button_left;
    bool button_middle;
    bool button_right;
    double lastx;
    double lasty;
  } mujoco_instance_t;
=}

/**
 * @brief MuJoCo simulation with visualization.
 *
 * This reactor handles some basic manipulations of the view:
 * - Mouse scroll: Zoom in and out.
 * - Left mouse press and move: Rotate the view.
 * - Right mouse press and move: Shift the view up and down. Hold the shift key for in and out.
 */
reactor MuJoCo(
  model_file: string = {= LF_SOURCE_DIRECTORY LF_FILE_SEPARATOR "models" LF_FILE_SEPARATOR "hello.xml" =}
) {

  preamble {=
    // keyboard callback
    void keyboard(GLFWwindow* window, int key, int scancode, int act, int mods) {
      mujoco_instance_t* c = (mujoco_instance_t*)glfwGetWindowUserPointer(window); // Context.

      // backspace: reset simulation
      if (act==GLFW_PRESS && key==GLFW_KEY_BACKSPACE) {
        mj_resetData(c->m, c->d);
        mj_forward(c->m, c->d);
      }
    }

    // mouse button callback
    void mouse_button(GLFWwindow* window, int button, int act, int mods) {
      mujoco_instance_t* c = (mujoco_instance_t*)glfwGetWindowUserPointer(window); // Context.

      // update button state
      c->button_left = (glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_LEFT)==GLFW_PRESS);
      c->button_middle = (glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_MIDDLE)==GLFW_PRESS);
      c->button_right = (glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_RIGHT)==GLFW_PRESS);

      // update mouse position
      glfwGetCursorPos(window, &c->lastx, &c->lasty);
    }

    // mouse move callback
    void mouse_move(GLFWwindow* window, double xpos, double ypos) {
      mujoco_instance_t* c = (mujoco_instance_t*)glfwGetWindowUserPointer(window); // Context.

      // no buttons down: nothing to do
      if (!c->button_left && !c->button_middle && !c->button_right) {
        return;
      }

      // compute mouse displacement, save
      double dx = xpos - c->lastx;
      double dy = ypos - c->lasty;
      c->lastx = xpos;
      c->lasty = ypos;

      // get current window size
      int width, height;
      glfwGetWindowSize(window, &width, &height);

      // get shift key state
      bool mod_shift = (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT)==GLFW_PRESS ||
                        glfwGetKey(window, GLFW_KEY_RIGHT_SHIFT)==GLFW_PRESS);

      // determine action based on mouse button
      mjtMouse action;
      if (c->button_right) {
        action = mod_shift ? mjMOUSE_MOVE_H : mjMOUSE_MOVE_V;
      } else if (c->button_left) {
        action = mod_shift ? mjMOUSE_ROTATE_H : mjMOUSE_ROTATE_V;
      } else {
        action = mjMOUSE_ZOOM;
      }

      // move camera
      mjv_moveCamera(c->m, action, dx/height, dy/height, &c->scn, &c->cam);
    }

    // scroll callback
    void scroll(GLFWwindow* window, double xoffset, double yoffset) {
      mujoco_instance_t* c = (mujoco_instance_t*)glfwGetWindowUserPointer(window); // Context.

      // emulate vertical mouse motion = 5% of window height
      mjv_moveCamera(c->m, mjMOUSE_ZOOM, 0, -0.05*yoffset, &c->scn, &c->cam);
    }
  =}

  state window: GLFWwindow* = {= NULL =}
  state context: mujoco_instance_t = {= {.m = NULL, .d = NULL} =}

  reaction(startup) {=
    mjModel* m  = NULL;                 // MuJoCo model
    mjData* d = NULL;                   // MuJoCo data

    // load and compile model
    char error[1000] = "Could not load model";
    m = mj_loadXML(self->model_file, 0, error, 1000);
    if (!m) {
      mju_error("Load model error: %s", error);
    }

    // make data
    d = mj_makeData(m);

    // init GLFW
    if (!glfwInit()) {
      mju_error("Could not initialize GLFW");
    }

    // create window, make OpenGL context current, request v-sync
    self->window = glfwCreateWindow(1200, 900, "Demo", NULL, NULL);
    glfwMakeContextCurrent(self->window);
    glfwSwapInterval(1);

    // Set up the context struct.
    self->context.m = m;
    self->context.d = d;
    self->context.button_left = false;
    self->context.button_middle = false;
    self->context.button_right = false;
    self->context.lastx = 0;
    self->context.lasty = 0;
    glfwSetWindowUserPointer(self->window, &self->context);

    // initialize visualization data structures
    mjv_defaultCamera(&self->context.cam);
    mjv_defaultOption(&self->context.opt);
    mjv_defaultScene(&self->context.scn);
    mjr_defaultContext(&self->context.con);

    // create scene and context
    mjv_makeScene(m, &self->context.scn, 2000);
    mjr_makeContext(m, &self->context.con, mjFONTSCALE_150);

    // install GLFW mouse and keyboard callbacks
    glfwSetKeyCallback(self->window, keyboard);
    glfwSetCursorPosCallback(self->window, mouse_move);
    glfwSetMouseButtonCallback(self->window, mouse_button);
    glfwSetScrollCallback(self->window, scroll);

    // run main loop, target real-time simulation and 60 fps rendering
    while (!glfwWindowShouldClose(self->window)) {
      // advance interactive simulation for 1/60 sec
      //  Assuming MuJoCo can simulate faster than real-time, which it usually can,
      //  this loop will finish on time for the next frame to be rendered at 60 fps.
      //  Otherwise add a cpu timer and exit this loop when it is time to render.
      mjtNum simstart = d->time;
      while (d->time - simstart < 1.0/60.0) {
        mj_step(m, d);
      }

      // get framebuffer viewport
      mjrRect viewport = {0, 0, 0, 0};
      glfwGetFramebufferSize(self->window, &viewport.width, &viewport.height);

      // update scene and render
      mjv_updateScene(m, d, &self->context.opt, NULL, &self->context.cam, mjCAT_ALL, &self->context.scn);
      mjr_render(viewport, &self->context.scn, &self->context.con);

      // swap OpenGL buffers (blocking call due to v-sync)
      glfwSwapBuffers(self->window);

      // process pending GUI events, call GLFW callbacks
      glfwPollEvents();
    }

    //free visualization storage
    mjv_freeScene(&self->context.scn);
    mjr_freeContext(&self->context.con);

    // free MuJoCo model and data
    mj_deleteData(d);
    mj_deleteModel(m);

    // terminate GLFW (crashes with Linux NVidia drivers)
  #if defined(__APPLE__) || defined(_WIN32)
    glfwTerminate();
  #endif

  =}
}

main reactor {
  m = new MuJoCo()
}