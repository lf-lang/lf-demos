target C {
  coordination: decentralized,
  keepalive: true
}

import WebSocketServerString from "lib/WebSocketServerString.lf"

reactor Node (period: time = 1 s, STA: time = 0) {
  preamble {=
    #include <string.h> // For strlen()
  =}
  input in: int
  output out: int
  output lag: char*
  timer t(0, period)
  state count: int = 0

  method measure(): char* {=
    interval_t lag = lf_time_physical() - lf_time_logical();
    char* result;
    asprintf(&result, "{lag: " PRINTF_TIME "}", lag);
    return result;
  =}

  reaction(t) -> out {=
    lf_set(out, self->count++);
  =}

  reaction(in) -> lag {=
    char* message = measure();
    lf_set_array(lag, message, strlen(message));
  =} STAA(0) {=
    // Handle STP violations just like normal inputs.
    char* message = measure();
    lf_set_array(lag, message, strlen(message));
  =}
}

federated reactor at lf-mac.eecs.berkeley.edu {
  w1 = new WebSocketServerString(
    hostport = 8080,
    initial_file = {= LF_SOURCE_DIRECTORY LF_FILE_SEPARATOR "Probe1.html" =}
  )
  w2 = new WebSocketServerString(
    hostport = 8081,
    initial_file = {= LF_SOURCE_DIRECTORY LF_FILE_SEPARATOR "Probe2.html" =}
  ) at lf-mac.eecs.berkeley.edu;
  p1 = new Node()
  p2 = new Node() at lf-mac.eecs.berkeley.edu;

  p1.out -> p2.in
  p2.out -> p1.in

  p1.lag -> w1.in
  p2.lag -> w2.in
}
