target C {
  coordination: decentralized,
  keepalive: true
}

import Source from "Bank3.lf"

reactor AccountManager {
  preamble {=
    #include <stdlib.h> // For asprintf
    #include <string.h> // For strlen
  =}
  input money: char*
  input remote: char*
  output response: char*
  state balance: int = 0

  reaction(money, remote) -> response {=
    // Combined transactions are accepted only if balance remains non-negative.
    int previous_balance = self->balance;
    if (remote->is_present) {
      lf_print("Remote transaction: %s", remote->value);
      self->balance += atoi(remote->value); // Will report 0 if not a valid int.
    }
    if (money->is_present) {
      lf_print("Local transaction: %s", money->value);
      self->balance += atoi(money->value); // Will report 0 if not a valid int.
    }
    if (self->balance < 0) {
      lf_print("************ Overdraft! Transaction denied. Penalty of $30.");
      self->balance = previous_balance - 30;
    }
    char* balance;
    asprintf(&balance, "%d", self->balance);
    lf_set_array(response, balance, strlen(balance));
    lf_print("**** Balance: %s", balance);
  =}
}

reactor Branch(offset:time = 995 ms, period:time = 1 s, amount:int = 100, num:int = 4) {
  input remote:char*
  output received:char*

  w = new Source(
      offset = offset,
      period = period,
      amount = amount,
      num = num)
  a = new AccountManager()
  w.out -> a.money
  remote -> a.remote
  w.out -> received
}

federated reactor {
  b1 = new Branch()
  b2 = new Branch(offset = 2 s, period = 2 s, amount = -200, num = 2)
  b1.received ~> b2.remote
  b2.received ~> b1.remote
}
