target C {
  coordination: decentralized,
  keepalive: true
}

import AccountManager from "Bank2.lf"

reactor Source(offset:time = 995 ms, period:time = 1 s, amount:int = 100, num:int = 4) {
  preamble {=
    #include <stdlib.h> // For asprintf
    #include <string.h> // For strlen
  =}
  output out:char*
  logical action a
  state count:int = 0
  reaction(startup) -> a {=
    lf_schedule(a, self->offset);
  =}
  reaction(a) -> out, a {=
    char* message;
    asprintf(&message, "%d", self->amount);
    lf_set_array(out, message, strlen(message));
    if (self->count++ < self->num - 1) {
      lf_schedule(a, self->period);
    }
  =}
}

reactor Branch(offset:time = 995 ms, period:time = 1 s, amount:int = 100, num:int = 4) {
  input remote:char*
  output received:char*

  w = new Source(
      offset = offset,
      period = period,
      amount = amount,
      num = num)
  a = new AccountManager()
  w.out -> a.money
  remote -> a.remote
  w.out -> received
}

federated reactor {
  b1 = new Branch()
  b2 = new Branch(offset = 2 s, period = 2 s, amount = -200, num = 2)
  b1.received ~> b2.remote
  b2.received ~> b1.remote
}
