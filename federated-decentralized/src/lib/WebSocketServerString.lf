/**
 * A web socket server enabling a user interface realized in the browser. This creates a web server
 * that listens on a port (default 8080) for web socket connections. The intended usage is that you
 * create a client in an HTML/JavaScript file that connects to this server and provides a
 * browser-based user interface.
 *
 * This version is simpler to use than WebSocketServer. It is limited to a single connection at a
 * time and to string-valued messages.
 *
 * This version sets the STAA of the input to `forever`, therefore requiring a response.
 * An application must provide an input in response to any `received` output. In addition, it has
 * to provide an initial input at startup; otherwise, the reactor will block at the start tag waiting
 * for an input. This is effectively a dataflow style of computation.
 *
 * If an `initial_file` parameter value is provided, it is expected to be a fully-qualified path to
 * a file that this server will serve upon receiving an HTTP request. This can be used to provide
 * the initial HTML (with embedded JavaScript) that will then establish a web socket connection to
 * the running LF program. To specify a file located in the same directory as your source LF file,
 * you can use a syntax like this:
 * ```
 * s = new WebSocketServerString(
 *    initial_file = {= LF_SOURCE_DIRECTORY LF_FILE_SEPARATOR "filename.html" =}
 * )  
 * ```

 *
 * When a connection is established with a client, an output with value `true` is produced on the
 * `connected` port. A value `false` is produced when the client disconnects.
 *
 * To send messages to a client, simply provide a string on the `in` port.
 * This must be a dynamically-allocated strings (type `char*`).
 *
 * When a message is received from a client, a string will be produced on the `received` output
 * port. The type of this port is `char*`, indicating a dynamically-allocated string.
 *
 * This uses the <a href="https://libwebsockets.org">libwebsockets</a> (see <a
 * href="https://libwebsockets.org/lws-api-doc-main/html/index.html">API documentation</a> and <a
 * href="https://libwebsockets.org/lws-api-doc-main/html/md_READMEs_README_build.html">installation
 * instructions</a>). To install on MacOS, we recommending using brew:
 * <pre> brew install libwebsockets
 * </pre> This puts the compiled libraries in {@code /usr/local/lib}, and these libraries can be
 * linked to providing the {@code -lwebsockets} compile option.
 *
 * A key limitation is that this should use the secure sockets API in libwebsockets to get SSL.
 *
 * @param initial_file The (optional) file to serve in response to HTTP requests.
 * @param hostport The host port number, which defaults to 8080.
 *
 * @author Edward A. Lee
 */
target C

import WebSocketServer from "WebSocketServer.lf"

reactor WebSocketServerString(hostport: int = 8080, initial_file: string = {= NULL =}) {
  input in: char*

  output connected: bool
  output received: char*

  state ws: web_socket_instance_t

  // Limit the number of clients to one.
  server = new WebSocketServer(hostport=hostport, max_clients=1, initial_file=initial_file)

  reaction(startup) {=
    self->ws.connected = false;
  =}

  reaction(server.connected) -> connected {=
    if (server.connected->value.connected) {
      self->ws = server.connected->value;
    }
    // Do not produce an output if the connected message is due to a denied connection.
    if (self->ws.wsi == server.connected->value.wsi) {
      lf_set(connected, server.connected->value.connected);
    }
  =}

  reaction(server.received) -> received {=
    // NOTE: WebSocketServer ensures that the message is null terminated.
    size_t len = strlen(server.received->value->message) + 1;
    char* message = (char*)malloc(len * sizeof(char));
    strcpy(message, server.received->value->message);
    lf_set_array(received, message, len);
  =}

  reaction(in) -> server.send {=
    if (self->ws.connected) {
      web_socket_message_t* to_send = (web_socket_message_t*)malloc(sizeof(web_socket_message_t));
      char* message_copy;
      message_copy = (char*)malloc(strlen(in->value));
      strcpy(message_copy, in->value);
      to_send->length = strlen(in->value);
      to_send->message = message_copy;
      to_send->wsi = self->ws.wsi;
      lf_set(server.send, to_send);
    } else {
      // Web socket is not connected.
      lf_print_warning("Web socket is not connected. Dropping message to send.");
    }
  =} STAA (forever) {=
    lf_print_error("Unexpected STP violation!");
  =}
}
