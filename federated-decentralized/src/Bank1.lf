target C {
  coordination: decentralized
}
import WebSocketServerString from "lib/WebSocketServerString.lf"

reactor Branch {
  preamble {=
    #include <stdlib.h> // For asprintf
    #include <string.h> // For strlen
  =}
  input money: char*
  output response: char*
  state balance: int = 0
  reaction(startup) -> response {=
    // Send an initial message to unblock the web server.
    char* message;
    asprintf(&message, "%s", "0");
    lf_set_array(response, message, strlen(message));
  =}
  reaction(money) -> response {=
    int received = atoi(money->value); // Will report 0 if not a valid int.
    lf_print("Received %d", received);
    self->balance += received;
    char* balance;
    asprintf(&balance, "%d", self->balance);
    lf_set_array(response, balance, strlen(balance));
    lf_print("Balance: %s", balance);
  =}
}
federated reactor {
  w = new WebSocketServerString(
    initial_file = {= LF_SOURCE_DIRECTORY LF_FILE_SEPARATOR "Bank1.html" =}
  )
  b = new Branch()
  w.received -> b.money
  b.response -> w.in
}